package view;


import model.Jurl;
import model.Response;
import org.json.JSONObject;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * panel for the model.Response of model.Request
 */
public class ResponsePanel extends JPanel {
    private UpperPanel upperPanel;
    private CenterPanel centerPanel;
    private Response response;

    /**
     * constructs a panel with the response generated by operation of request
     *
     * @param response the response which panel is about :/
     */
    public ResponsePanel(Response response) {
        //setting panel attributes
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(370, 550));
        setMinimumSize(new Dimension(100, 400));

        //initializing fields
        this.response = response;

        //creating and adding upperPanel
        upperPanel = new UpperPanel();

        //creating and adding centerPanel
        centerPanel = new CenterPanel();

        //adding components
        add(upperPanel, BorderLayout.PAGE_START);
        add(centerPanel, BorderLayout.CENTER);

    }

    public void setElapsedTime(String time) {
        upperPanel.getElapsedTime().setText(time + " s");
        upperPanel.revalidate();
        revalidate();
    }
    //--------------------------------------------------------------------------

    /**
     * the upper panel which contains requests details
     */
    private class UpperPanel extends JPanel {
        private JTextField statusCode;
        private JTextField statusMessage;
        private JTextField elapsedTime;

        //creating costume JTextField with preDefined attributes
        private class ResponseDetail extends JTextField {
            public ResponseDetail(String text) {
                super(text);
                setEditable(false);
                setBackground(Color.white);
                setBorder(BorderFactory.createLineBorder(Color.black));
                setPreferredSize(new Dimension(getPreferredSize().width + 50, getPreferredSize().height + 25));
                setMinimumSize(this.getPreferredSize());
                setMaximumSize(this.getPreferredSize());
                setHorizontalAlignment(JTextField.CENTER);
            }
        }

        /**
         * constructs panel with response details
         */
        public UpperPanel() {
            super(new FlowLayout(FlowLayout.LEFT));

            //Initializing fields
            statusCode = new ResponseDetail(response.getStatusCode());
            statusMessage = new ResponseDetail(response.getStatusMessage());
            elapsedTime = new ResponseDetail("");
            //adding to panel
            add(statusCode);
            add(statusMessage);
            add(elapsedTime);
        }

        public JTextField getElapsedTime() {
            return elapsedTime;
        }
    }

    //-------------------------------------------------------------------------------

    /**
     * the center panel which other panels can be navigated through
     */
    private class CenterPanel extends JPanel {
        private JMenuBar menuBar;
        private JMenu messageBody;
        private JMenu headers;
        private JPanel mainPanel;
        private JPanel rawBody;
        private JPanel previewBody;
        private JPanel headerPanel;
        private CardLayout layout;

        /**
         * constructs panel with menu and panels to see the response details
         */
        public CenterPanel() {
            //setting panel's attributes
            super(new BorderLayout());

            //creating main panel and its layOut
            mainPanel = new JPanel();
            layout = new MyCardLayout();
            mainPanel.setLayout(layout);
            add(mainPanel, BorderLayout.CENTER);
//            mainPanel.setMaximumSize(this.getMaximumSize());

            //creating MenuBar
            menuBar = new JMenuBar();
            menuBar.setPreferredSize(new Dimension(menuBar.getPreferredSize().width, menuBar.getPreferredSize().height + 30));
            add(menuBar, BorderLayout.PAGE_START);

            //creating menu Items
            messageBody = new JMenu("Body");
            JMenuItem rawItem = new JMenuItem("Raw");
            rawItem.addActionListener(new MenuHandler.MenuItemHandler(layout, mainPanel));
            JMenuItem previewItem = new JMenuItem("Preview");
            previewItem.addActionListener(new MenuHandler.MenuItemHandler(layout, mainPanel));
            messageBody.add(rawItem);
            messageBody.add(previewItem);
            menuBar.add(messageBody);

            headers = new JMenu("Header");
            headers.addMenuListener(new MenuHandler.MenuSelectionHandler(layout, mainPanel));
            menuBar.add(headers);


            //creating menu panels
            rawBody = new RawBody();
            previewBody = new PreviewPanel();
            headerPanel = new HeaderPanel();
            headerPanel.setMaximumSize(this.getMaximumSize());

            //adding panels to mainPanel
            mainPanel.add(new JScrollPane(rawBody), "Raw");
            mainPanel.add(new JScrollPane(previewBody), "Preview");
            mainPanel.add(headerPanel, "Header");

//            mainPanel.add(new JScrollPane(panelHolder), BorderLayout.CENTER);
        }

        /**
         * creating a layout extending CardLayout which sets its preferred size based on displaying panel
         */
        private class MyCardLayout extends CardLayout {
            @Override
            public Dimension preferredLayoutSize(Container parent) {
//                return super.preferredLayoutSize(parent);
                Component current = findCurrentComponent(parent);
                if (current != null) {
                    Insets insets = parent.getInsets();
                    Dimension pref = current.getPreferredSize();
                    pref.width += insets.left + insets.right;
                    pref.height += insets.top + insets.bottom;
                    return pref;
                }
                return super.preferredLayoutSize(parent);
            }

            private Component findCurrentComponent(Container parent) {
                for (Component comp : parent.getComponents()) {
                    if (comp.isVisible())
                        return comp;
                }
                return null;
            }
        }


        //-----------------------------------------------------------------------------------

        /**
         * the raw body panel with response's text
         */
        private class RawBody extends JPanel {
            private JTextArea display;

            public RawBody() {
                super(new BorderLayout());
                //initializing display
                display = new JTextArea();
                display.setEditable(false);
                if (!response.getResponseText().isEmpty())
                    display.setText(response.getResponseText());
                else
                    display.setText("No body returned");
                add(display, BorderLayout.CENTER);
            }

            public String getDisplayText() {
                return display.getText();
            }
        }
        //-------------------------------------------------------------------------------------

        /**
         * the preview panel which is used when response contains pictures or sth:/
         */
        private class PreviewPanel extends JPanel {
            private JTextPane pageDisplay;
            private JLabel image;

            public PreviewPanel() {
                super(new BorderLayout());
                //initializing display

                if (response.isImage()) {
//                System.out.println("fuck");
                    ImageIcon imageIcon = null;
                    imageIcon = new ImageIcon(Jurl.downloadPic(response.getRequestURL()));
                    image = new JLabel(imageIcon);
                    add(image);
                    revalidate();
                    repaint();
                } else {
                    pageDisplay = new JTextPane();
                    pageDisplay.setEditable(false);
                    if (response.isJSON()) {
                        JSONObject jsonObject = new JSONObject(response.getResponseText());
                        pageDisplay.setText(jsonObject.toString(4));
                    } else {
                        pageDisplay.setContentType("text/html");
                        pageDisplay.setText(response.getResponseText());
                    }
                    pageDisplay.setVisible(true);
                    add(pageDisplay);
                }


            }
        }
        //---------------------------------------------------------------------------------------

        /**
         * the header panel which shows the list of response's headers
         */
        private class HeaderPanel extends JPanel {
            private JLabel nameLabel;
            private JLabel valueLabel;
            private JButton copyBtn;

            /**
             * constructs header panel with 2 label and the list of headers with a button to copy text
             */
            public HeaderPanel() {


                setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
                setPreferredSize(new Dimension(400, 600));


                //creating panel containing components
                JPanel contentHolder = new JPanel();
                contentHolder.setLayout(new BoxLayout(contentHolder, BoxLayout.Y_AXIS));


                // name Label
                nameLabel = new JLabel("Name");
                nameLabel.setHorizontalAlignment(JLabel.CENTER);
                nameLabel.setMaximumSize(new Dimension(50, 30));

                //value Label
                valueLabel = new JLabel("Value");
                valueLabel.setHorizontalAlignment(JLabel.CENTER);
                valueLabel.setMaximumSize(new Dimension(50, 30));

                //create a panel to hold Labels
                JPanel labelHolder = new JPanel();
                labelHolder.setLayout(new BoxLayout(labelHolder, BoxLayout.X_AXIS));
                labelHolder.add(nameLabel);
                labelHolder.add(Box.createRigidArea(new Dimension(100, 30)));
                labelHolder.add(valueLabel);


                //create a button to copy them to clipBoard
                copyBtn = new JButton("Copy to Clipboard");
                copyBtn.setPreferredSize(new Dimension(150, 30));
                copyBtn.addActionListener(new CopyBtnHandler());

                //adding components to the holder panel
                contentHolder.add(Box.createRigidArea(new Dimension(100, 20)));
                contentHolder.add(labelHolder);
                contentHolder.add(Box.createRigidArea(new Dimension(100, 5)));
                createHeaderPanels(contentHolder);
                contentHolder.add(Box.createRigidArea(new Dimension(100, 40)));
                contentHolder.add(copyBtn);
                contentHolder.add(Box.createRigidArea(new Dimension(50, 40)));



                contentHolder.setPreferredSize(new Dimension(400,1000));

                add(new JScrollPane(contentHolder), BorderLayout.CENTER);


            }

            /**
             * creates and adds headers to the panel
             */
            private void createHeaderPanels(JPanel contentHolder) {
                for (Info header : response.getHeaders()) {
                    if (header.getState())
                        contentHolder.add(new HeaderBox(header.getKey(), header.getValue()));
                }
            }

            /**
             * a customized panel to show headers as key and value pairs
             */
            private class HeaderBox extends JPanel {
                private JTextField key;
                private JTextField value;

                /**
                 * constructs panel with given strings and form them
                 *
                 * @param keyText   the text of key
                 * @param valueText the text of value
                 */
                public HeaderBox(String keyText, String valueText) {
                    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

                    //setting key textField
                    key = new JTextField();
                    key.setText(keyText);
                    key.setHorizontalAlignment(JTextField.CENTER);
                    key.setEditable(false);
                    key.setMaximumSize(new Dimension(180, 60));
                    key.setMinimumSize(new Dimension(150, 60));
                    key.setPreferredSize(key.getMaximumSize());

                    //setting value textField
                    value = new JTextField();
                    value.setText(valueText);
                    value.setHorizontalAlignment(JTextField.CENTER);
                    value.setEditable(false);
                    value.setMaximumSize(new Dimension(180, 60));

                    //adding components to the panels
                    add(Box.createRigidArea(new Dimension(20, 5)));
                    add(key);
                    add(Box.createRigidArea(new Dimension(5, 5)));
                    add(value);
                    add(Box.createRigidArea(new Dimension(10, 5)));
                }
            }

            /**
             * creates a listener for copy button
             */
            private class CopyBtnHandler implements ActionListener {
                /**
                 * triggers when button is pressed
                 * copies all headers to clipBoard
                 *
                 * @param e
                 */
                @Override
                public void actionPerformed(ActionEvent e) {
                    StringBuilder headersCopy = new StringBuilder();
                    for (Info header : response.getHeaders()) {
                        if (header.getState())
                            headersCopy.append(header.toString());
                    }
                    StringSelection stringSelection = new StringSelection(headersCopy.toString());
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                    JOptionPane.showMessageDialog(null, "Headers copied to Clipboard successfully");
                }
            }
        }
    }
}
